install.packages("rattle")
?
n!
install.packages(c("e1071", "Hmisc", "markdown", "rJava", "xlsx"))
load(rattle)
library("rattle"); rattle()
install.packages("Rcmdr")
require(rcmdr)
require("Rcmdr")
??rstudio
library("rattle", lib.loc="C:/Users/raul.gazzola/Documents/R/win-library/3.0")
require(rattle)
library(rattle)
rattle
rattle()
rcmdr()
Rcmdr()
library(Rcmdr)
Rcmdr()
svm_error <- function() {
# 1) generate a random training sample to train on + fit
# build training set
x0 = mvrnorm(50,rep(0,10),diag(10))
x1 = mvrnorm(50,rep(c(1,0),c(5,5)),diag(10))
train = rbind(x0,x1)
classes = rep(c(0,1),c(50,50))
dat=data.frame(train,classes=as.factor(classes))
# fit
svmfit=svm(classes~.,data=dat)
# 2) evaluate the number of mistakes we make on a large test set = 1000 samples
test_x0 = mvrnorm(500,rep(0,10),diag(10))
test_x1 = mvrnorm(500,rep(c(1,0),c(5,5)),diag(10))
test = rbind(test_x0,test_x1)
test_classes = rep(c(0,1),c(500,500))
test_dat = data.frame(test,test_classes=as.factor(test_classes))
fit = predict(svmfit,test_dat)
error = sum(fit != test_dat$test_classes)/1000
return(error)
}
# 3) repeat (1-2) many times and averaging the error rate for each trial
errors = replicate(100, svm_error())
x0 = mvrnorm(50,rep(0,10),diag(10))
library("e1071", lib.loc="C:/Users/raul.gazzola/Documents/R/win-library/3.0")
x0 = mvrnorm(50,rep(0,10),diag(10))
library("MASS", lib.loc="C:/Program Files/R/R-3.0.2/library")
x0 = mvrnorm(50,rep(0,10),diag(10))
x1 = mvrnorm(50,rep(c(1,0),c(5,5)),diag(10))
train = rbind(x0,x1)
classes = rep(c(0,1),c(50,50))
dat=data.frame(train,classes=as.factor(classes))
# fit
svmfit=svm(classes~.,data=dat)
# 2) evaluate the number of mistakes we make on a large test set = 1000 samples
test_x0 = mvrnorm(500,rep(0,10),diag(10))
test_x1 = mvrnorm(500,rep(c(1,0),c(5,5)),diag(10))
test = rbind(test_x0,test_x1)
test_classes = rep(c(0,1),c(500,500))
test_dat = data.frame(test,test_classes=as.factor(test_classes))
fit = predict(svmfit,test_dat)
error = sum(fit != test_dat$test_classes)/1000
return(error)
errors = replicate(100, svm_error())
print(errors)
print(mean(errors))
print(mean(errors))
svm_error <- function() {
# 1) generate a random training sample to train on + fit
# build training set
x0 = mvrnorm(50,rep(0,10),diag(10))
x1 = mvrnorm(50,rep(c(1,0),c(5,5)),diag(10))
train = rbind(x0,x1)
classes = rep(c(0,1),c(50,50))
dat=data.frame(train,classes=as.factor(classes))
# fit
svmfit=svm(classes~.,kernel = "linear",data=dat)
# 2) evaluate the number of mistakes we make on a large test set = 1000 samples
test_x0 = mvrnorm(500,rep(0,10),diag(10))
test_x1 = mvrnorm(500,rep(c(1,0),c(5,5)),diag(10))
test = rbind(test_x0,test_x1)
test_classes = rep(c(0,1),c(500,500))
test_dat = data.frame(test,test_classes=as.factor(test_classes))
fit = predict(svmfit,test_dat)
error = sum(fit != test_dat$test_classes)/1000
return(error)
}
# 3) repeat (1-2) many times and averaging the error rate for each trial
errors = replicate(100, svm_error())
print(errors)
print(mean(errors))
glmfit=glm(classes~., family = binomial, data=dat)
glmfit
fit = predict(glmfit,test_dat)
error = sum(fit != test_dat$test_classes)/1000
print(errors)
glm_error <- function() {
# 1) generate a random training sample to train on + fit
# build training set
x0 = mvrnorm(50,rep(0,10),diag(10))
x1 = mvrnorm(50,rep(c(1,0),c(5,5)),diag(10))
train = rbind(x0,x1)
classes = rep(c(0,1),c(50,50))
dat=data.frame(train,classes=as.factor(classes))
# fit
glmfit=glm(classes~., family = binomial, data=dat)
# 2) evaluate the number of mistakes we make on a large test set = 1000 samples
test_x0 = mvrnorm(500,rep(0,10),diag(10))
test_x1 = mvrnorm(500,rep(c(1,0),c(5,5)),diag(10))
test = rbind(test_x0,test_x1)
test_classes = rep(c(0,1),c(500,500))
test_dat = data.frame(test,test_classes=as.factor(test_classes))
fit = predict(glmfit,test_dat)
error = sum(fit != test_dat$test_classes)/1000
return(error)
}
# 3) repeat (1-2) many times and averaging the error rate for each trial
errors = replicate(100, svm_error())
print(errors)
print(mean(errors))
# 1) 9.
dimnames(USArrests)
apply()
?apply
summary (USArrests)
?prcomp
pca.out=prcomp(USArrests, scale=TRUE)
pca.out
names(pca.out)
biplot(pca.out, scale=0)
biplot(pca.out)
biplot(pca.out, scale=0, cex=0.6)
```
K-Means Clustering
set.seed(101)
x=matrix(rnorm(100*2),100,2)
xmean=matrix(rnorm(8,sd=4),4,2)
which=sample(1:4,100,replace=TRUE)
x=x+xmean[which,]
plot(x,col=which,pch=19)
```
?kmeans
km.out=kmeans(x,4,nstart=15)
km.out
plot(x,col=km.out$cluster,cex=2,pch=1,lwd=2)
points(x,col=which,pch=19)
points(x,col=c(4,3,2,1)[which],pch=19)
?hclust
hc.complete=hclust(dist(x),method="complete")
plot(hc.complete)
?dist
hc.single=hclust(dist(x),method="single")
plot(hc.single)
hc.average=hclust(dist(x),method="average")
plot(hc.average)
```
hc.cut=cutree(hc.complete,4)
table(hc.cut,which)
table(hc.cut,km.out$cluster)
```
plot(hc.complete,labels=which)
load("~/MOOC DataAnalytic data/10.R.RData")
load("~/MOOC DataAnalytic data/10.R.RData")
?cblind
?rbind
summary (x)
X.global=rbind(x,x.test)
dimnames(x.global)
View(X.global)
summary (x.global)
Xglobal=rbind(x,x.tes)
X.global=rbind(x,x.test)
dimnames(x.global)
summary(x.global)
summary(x)
summary(x.test)
summary(x.global)
global=rbind(x,x.test)
summary(global)
dimnames(global)
apply(global,mean)
apply(global,1,mean)
summary(apply(global,1,mean))
pca.out=prcomp(global)
biplot(pca.out)
biplot(pca.out,cex=0,01)
biplot(pca.out,cex=0.01)
pca.out
summary(pca.out)
Xglobal=rbind(x,x.test)
dimnames(xglobal)
summary(xglobal)
summary(USArrests)
install.packages("devtools")
find.package("devtools")
find.packages("devtools")
install.packages("devtools")
library("devtools", lib.loc="C:/Users/raul.gazzola/Documents/R/win-library/3.0")
find.packages("devtools")
find.package("devtools")
install.package("devtools")
install.packages("devtools")
install.packages("devtools")
find.package("devtools")
find_rtools()
library("devtools", lib.loc="C:/Users/raul.gazzola/Documents/R/win-library/3.0")
find_rtools()
find_rtools()
detach("package:devtools", unload=TRUE)
library("devtools", lib.loc="C:/Users/raul.gazzola/Documents/R/win-library/3.0")
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,lengh=30)
my_seq <- seq(5,10,lenght=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
library(swirl)
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "raufulgaz")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste (c(1:3),c("X","Y","Z"),sep="")
paste (1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x(c(3,5,7))
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
mY_vector
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix <- matrix(1:20,nrow=4,ncol=5)
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
setwd("~/GitHub/ExData_Plotting1")
housepower_full <- read.csv("./data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
housepower_full <- read.csv("./data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
housepower_full$Date <- as.Date(housepower_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(housepower_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 1
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
with(data, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
plot(sub$Datetime, sub$Sub_metering_1, type="l",
ylab= "Energy sub metering", xlab="")
plot(data$Datetime, data$Sub_metering_1, type="l",
ylab= "Energy sub metering", xlab="")
lines(data$Datetime, data$Sub_metering_2, type="l", col="red")
lines(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
plot(data$Datetime, data$Sub_metering_1, type="l",
ylab= "Energy sub metering", xlab="")
lines(data$Datetime, data$Sub_metering_2, type="l", col="red")
lines(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
## Saving to file
dev.copy(png, file="plot2.png", height=480, width=480)
par(mfcol=c(2,2))
plot(data$DateTime, data$Global_active_power, type="l",
ylab= "Global Active Power", xlab="")
par(mfcol=c(2,2))
plot(data$Datetime, data$Global_active_power, type="l",
ylab= "Global Active Power", xlab="")
plot(data$Datetime, data$Sub_metering_1, type="l",
ylab= "Energy sub metering", xlab="")
lines(data$Datetime, data$Sub_metering_2, type="l", col="red")
lines(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
plot(data$Datetime,data$Voltage,type="l",ylab="Voltage",xlab="datetime")
plot(data$Datetime,data$Global_reactive_power,type='l',xlab="datetime",
ylab="Global_reactive_power")
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
png("plot4.png", width = 480, height = 480)
par(mfcol=c(2,2))
plot(data$Datetime, data$Global_active_power, type="l",
ylab= "Global Active Power", xlab="")
plot(data$Datetime, data$Sub_metering_1, type="l",
ylab= "Energy sub metering", xlab="")
lines(data$Datetime, data$Sub_metering_2, type="l", col="red")
lines(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
plot(data$Datetime,data$Voltage,type="l",ylab="Voltage",xlab="datetime")
plot(data$Datetime,data$Global_reactive_power,type='l',xlab="datetime",
ylab="Global_reactive_power")
dev.off()
setwd("~/GitHub/ExData_Plotting1")
## Get dataset
housepower_full <- read.csv("./data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
housepower_full$Date <- as.Date(housepower_full$Date, format="%d/%m/%Y")
## Subset and convert data
data <- subset(housepower_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 1 and save
png("plot1.png", width = 480, height = 480)
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
## Plot 2 and save
png("plot2.png", width = 480, height = 480)
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
## Plot 3 and save
png("plot3.png", width = 480, height = 480)
plot(data$Datetime, data$Sub_metering_1, type="l",
ylab= "Energy sub metering", xlab="")
lines(data$Datetime, data$Sub_metering_2, type="l", col="red")
lines(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
dev.off()
## Plot 4 and save
png("plot4.png", width = 480, height = 480)
par(mfcol=c(2,2))
plot(data$Datetime, data$Global_active_power, type="l",
ylab= "Global Active Power", xlab="")
plot(data$Datetime, data$Sub_metering_1, type="l",
ylab= "Energy sub metering", xlab="")
lines(data$Datetime, data$Sub_metering_2, type="l", col="red")
lines(data$Datetime, data$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, col=c("black", "red", "blue"))
plot(data$Datetime,data$Voltage,type="l",ylab="Voltage",xlab="datetime")
plot(data$Datetime,data$Global_reactive_power,type='l',xlab="datetime",
ylab="Global_reactive_power")
dev.off()
